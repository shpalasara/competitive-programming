#include<stdio.h>
#include<stdlib.h>

long long int wt[100000];
long long int data[100000];
long long int K[100001][501];
long long int freq[201];

long long int max(long long int a,long long int b) { return (a > b)? a : b; }

long long int knapSack(long long int W, long long int wt[], long long int val[], long long int n)
{
   long long int i, w;
  // long long int K[n+1][W+1];
 
   // Build table K[][] in bottom up manner
   for (i = 0; i <= n; i++)
   {
       for (w = 0; w <= W; w++)
       {
           if (i==0 || w==0)
               K[i][w] = 0;
           else if (wt[i-1] <= w)
                 K[i][w] = max(val[i-1] + K[i-1][w-wt[i-1]],  K[i-1][w]);
           else
                 K[i][w] = K[i-1][w];
       }
   }
 
   return K[n][W];
}

long long int separate_funt(long long int data[],long long int wt[],long long int N)
{
	//long long int sep;
	long long int i,j=N-1,temp;
	for(i=0;i<=j;i++)
	{
		if(data[i]<0)
		{
			if(data[j]<0)
				i--;
			else
			{
				temp = data[i];
				data[i]=data[j];
				data[j]=temp;
				temp = wt[i];
				wt[i] = wt[j];
				wt[j] = temp;
			}
			j--;
		}
	}
	return i;
}

long long int main()
{
	long long int T,N,_K,M,count;
	long long int total;
	long long int L,R,C;
	scanf("%lld",&T);
	while(T--)
	{
		total=0;count=0;
		scanf("%lld %lld %lld",&N,&_K,&M);
		long long int i,j,k;
		for(i=0;i<N;i++)
		{
			scanf("%lld",&data[i]);
			total+=data[i];
			data[i]=-data[i];
			wt[i]=201;
		}

		for(i=0;i<201;i++)
			freq[i]=0;

		for(i=0;i<M;i++)
		{
			j=1;
			scanf("%lld %lld %lld",&L,&R,&C);
			freq[C]++;
			if(freq[C]>1)
			{
				for(k=0;k<count;k++)
				{
					if(K[k][2]==C)
					{
						if(K[k][0]<=L && K[k][1]>=L)
						{
							if(K[k][1]<R)
								K[k][1]=R;
							j=0;
							break;
						}
						else if(K[k][0]<=R && K[k][1]>=R)
						{
							if(K[k][0]>L)
								K[k][1]=L;
							j=0;
							break;
						}
						else if(K[k][0]>=L && K[k][1]<=R)
						{
							K[k][0]=L;
							K[k][1]=R;
							j=0;
							break;
						}
					}
				}
			}
		
			if(j==1)
			{
				K[count][0]=L;
				K[count][1]=R;
				K[count][2]=C;
				count++;
			}
		}

		for(i=0;i<count;i++)
		{
			for(j=K[i][0]-1;j<K[i][1];j++)
			{
				if(wt[j]>K[i][2])
					wt[j]=K[i][2];
			}
		}

		long long int lim = separate_funt(data,wt,N);				

		long long int temp = knapSack(_K, wt, data, lim);
		printf("%lld\n",total+temp);
	}
	return 0;
}


		/*qsort(data,N,sizeof(data[0]),cmpfunc);
		money=K;ans=total;
		for(i=0;i<N;i++)
		{
			if(data[i].cost>0 && data[i].cost<=money)
			{
				ans-=data[i].A;
				money-=data[i].cost;
			}
			else if(data[i].cost>0 && data[i].cost<=K && total-ans>data[i].A)
				possible = i;
		}
		if(total-ans>data[i].A)
			ans = total-data[i].A;*/


/*

struct database{
long long int A;
long long int cost;
float fraction;
};

long long int cmpfunc (const void * a,const void * b)
{	
	float l = ((struct database *)a)->fraction;
	float r = ((struct database *)b)->fraction;
	return ((long long int)((l - r)*1000));
	struct info *elem1 = a;    
    	struct info *elem2 = b;

   if ( elem1->fraction < elem2->fraction)
      return -1;
   else if (elem1->fraction > elem2->fraction)
      return 1;
   else
      return 0;
}*/
